mongodb		sql
Documento | tupla o registro
coleccion | tabla
-------------------------------------
facil cambio de esquema en produccion
se piensa la escala en forma horizontal
replicacion de datos
JavaScript en servidor


------------INSERT-----------------------
document ={atributo : "value", atributo2 : "value2"}
db.collection.insert(document)

********Documento************
usuario ={nombre: "Test", edad: 21}
********Documento************
db.usuarios.insert(usuario)
//Colleccion no existe es creada por mongo al insertar
 db.usuarios.find().pretty()
db.usuarios.find( { condicion vacia } { campo:1, campo2:1 }  )//con "1" muestra solo ese campo o los campos que queramos
//mostrar los documentos de la colleccion usuarios



--------------WHERE--------------------------------
var comando = db.collection.findOne()
//encuentra un solo documento, se puede almacenar el comando en una variable tipo javascript
db.collection.find ( { atributo: "value" , atributo2: "value2"} )
db.usuarios.find ( { nombre:"Test" } ) // where de un campo
db.usuarios.find ( { _id: ObjectId ("5cb6bd2e004d4010c8190cd7") } ) //where con objectId
db.usuarios.find( { nombre: "Test", edad: 21} )   / / where con and 2 campos o mas
//buscar documentos con condicion condiciones se ponen entre llaves { }

---------------------Where not---------------------
db.collection.find ( {atributo: {$ne: ValueToExclude } } ) 
db.usuarios.find( {nombre:{$ne: "Test"} } ) //encuentra todos los documentos menos el que el campo nombre es Test
db.usuarios.find({nombre:"Test", edad:{$ne:23}})// ejemplo con mas campos


--------------UPDATE-----------------------------------------------------
 db.usuarios.insert( [uno, dos ] ) //inserta 2 documentos o mas dando como parametro un array con los nombres de los documentos

var test = db.usuarios.findOne( {nombre: "Test dos" } )//busca campo nombre con el registro test dos
test.nombre// muestra el nombre "Test dos"
test.nombre = "NOMBRE NUEVO" // empezamos update
db.usuarios.save( document )// guarda el update si el documento no tiene id crea uno nuevo y lo inserta
db.usuarios.save( test )// hace el update al documento test
//se pueden agregar atributos nuevos por ejemplo si test no tiene el atributo edad
test.edad = "24"// agrega el atributo pero no lo guarda aun
db.usuarios.update( { nombre: "NOMBRE NUEVO" }, test ) // hace el update al documento que tiene el nombre "NOMBRE NUEVO" agregando el campo edad


db.usuarios.update( {nombre:"Test" }, {$set: {nombre:"CF"} } ) // donde el nombre sea "Test actualiza el nombre a "CF" pero solo en uno
db.usuarios.update( {nombre:"Test" }, {$set: {nombre:"CF"} } ,{multi: true} ) // en todos los documentos donde el nombre sea "Test" actualiza el nombre a "CF"
db.usuarios.update( {nombre:"Test" }, {$unset: {nombre:"CF"} } ,{multi: true} ) // con unset se pueden eliminar campos



----------------------------------------------REMOVE----------------------------------------------------
db.coleccion.remove( { Condicion } )//Remueve los documentos que cumplan la condicion
db.coleccion.remove( { } )// Sin condicion remueve todos los documentos
db.coleccion.drop() //Elimina la coleccion completa
db.dropDatabase()//Elimina la base de datos





-----------------------------------------------Between------------------------------------------------------
db.usuarios.find( { condicion vacia } { campo:1, campo2:1, _id:0 }  )//con "1" muestra solo ese campo o los campos que queramos, con "0" se quita el campo que no quieres mostrar
Operadores
$gt  > greater than
$gte >= greate than equals
$lt < less than
$lte <= less than equals




-----------------------------------------------CURSORES---------------------------------------------------
for(i=0; i<100; i++){db.test.insert({valor:i})}

//find regresa un cursor
var cursor = db.test.find() // variable cursor solo muestra los documentos una vez
cursor.forEach( function(d){ print(d) } ) // for each arroja en bson
cursor.forEach( function(d){ print(d.valor) } )//for each arroja el campo valor de los documentos
cursor.forEach( function(d) { d.valor = 100; db.test.save(d); } ) //recorre cambiando los valores a 100 y guardandolos




----------------------------------------------METODOS DE CURSORES--------------------------------
db.test.find().count() // cuenta cuantos documentos hay en la coleccion, se pueden agregar condicionales
db.test.find().sort(valor:-1)// ordena de mayor a menor
db.test.find().sort(valor:1)// ordena de menor a mayor
db.test.find().sort(valor:-1).limit(3)// metodo limit recibe como parametro un numero en este caso 3 y muestra los primeros 3
db.test.find().sort(valor:-1).skip(1).limit(2)// metodo skip se salta el primero y muestra los siguientes 2
db.test.find().sort(valor:-1).skip(1).limit(2).size()// metodo size para saber cuantos documentos regresa en este caso si se usa el metodo count cuenta todos los de la coleccion



-----------------------------------------Arreglos-------------------------------------------------------
var arreglo =[1,2,3]
var usuario = { nombre: "test", valores: arreglo} // se agrega el arreglo al campo valores
db.usuarios.insert(usuario) // inserta documento con campos nombre y valores
db.usuarios.update( {} , {$addToSet: { valores: 4} } ) 
// con addToSet se agrega el 4 al arreglo quedaria valores[1.2.3.4] si se vuelve a escribir esta linea con el mismo valor a agregar no agrega el nuevo elemento
db.usuarios.update( {} , {$push: { valores: 4} } ) //con push agrega el elemento a valores aunque ya exista el 4 el arreglo quedaria [1,2,3,4,4]
db.usuarios.update( {} , {$push: { valores: { $each:[5,6] } } } )
// si se quiere agregar mas de un elemento al arreglo se hace con la palabra reservada each con esta linea la salida del arreglo seria [1,2,3,4,4,5,6]
db.usuarios.update( {} , {$push: { valores: { $each:[18,25] ,$position:4} } } )
// con la palabra reservada position se elige en que posicion agregar los elementos el arreglo quedaria [ 1, 2, 3, 4, 18, 25, 4, 5, 6 ]



11:17 p. m. 18/04/2019

----------------------------------Delete arreglos-----------------------------------------------------
se sigue usando el arreglo [ 1, 2, 3, 4, 18, 25, 4, 5, 6 ]
db.usuarios.update( { },{ $pull :{ valores:6 } } )// con pull elimina un elemento en este caso quedaria el arreglo [ 1, 2, 3, 4, 18, 25, 4, 5 ]
db.usuarios.update( { },{ $pull :{ valores:{$gte:18} } } )// de esta forma se pueden usar condicionales pero con pull solo elimina un elemento
db.usuarios.update( { },{ $pullAll :{ valores:[ 1,2,3 ] } } } )// con pullAll elimina multiples elementos